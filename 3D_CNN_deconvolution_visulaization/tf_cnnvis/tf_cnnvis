# imports
import os
import time

import numpy as np

from six.moves import range
from six import string_types

import tensorflow as tf
from tensorflow.python.framework import ops
from tensorflow.python.ops import gen_nn_ops

from skimage.restoration import denoise_tv_bregman

from math import ceil, sqrt
from scipy.misc import imsave

k = np.float32([1, 4, 6, 4, 1])
k = np.outer(k, k)
K5X5 = k[ : , : , None , None ] / k.sum() * np.eye(3, dtype = np.float32)
channels = 1
config = {
    "N" : 8,
    "EPS" : 1e-7,
    "K5X5" : K5X5,
    }

def image_normalization(image, s = 0.1, ubound = 255.0):
    img_min = np.min(image)
    img_max = np.max(image)
    return (((image - img_min) * ubound) / (img_max - img_min + config["EPS"])).astype('uint8')

def _im_normlize(images, ubound = 255.0):
    N = len(images)
    H, W, C = images[0][0].shape

    for i in range(N):
        for j in range(images[i].shape[0]):
            images[i][j] = image_normalization(images[i][j], ubound = ubound)
    return images

def convert_into_grid(Xs, ubound=255.0, padding=1):
    (N, H, W, C) = Xs.shape
    grid_size = int(ceil(sqrt(N)))
    grid_height = H * grid_size + padding * (grid_size - 1)
    grid_width = W * grid_size + padding * (grid_size - 1)
    grid = np.zeros((grid_height, grid_width, C))
    next_idx = 0
    y0, y1 = 0, H
    for y in range(grid_size):
        x0, x1 = 0, W
        for x in range(grid_size):
            if next_idx < N:
                grid[y0:y1, x0:x1] = Xs[next_idx]
                next_idx += 1
            x0 += W + padding
            x1 += W + padding
        y0 += H + padding
        y1 += H + padding
    return grid.astype('uint8')

def _images_to_grid(images):
    """
    Convert a list of arrays of images into a list of grid of images

    :param images:
        a list of 4-D numpy arrays(each containing images)
    :type images: list

    :return:
        a list of grids which are grid representation of input images
    :rtype: list
    """
    grid_images = []
    # if 'images' is not empty convert
    # list of images into grid of images
    if len(images) > 0:
        N = len(images)
        H, W, C = images[0][0].shape
        for j in range(len(images[0])):
            tmp = np.zeros((N, H, W, C))
            for i in range(N):
                tmp[i] = images[i][j]
            grid_images.append(np.expand_dims(convert_into_grid(tmp), axis = 0))
    return grid_images
